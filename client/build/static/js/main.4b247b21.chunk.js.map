{"version":3,"sources":["Components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","state","items","name","number","handleNameChange","event","setState","target","value","handleAmountChange","amount","handleSubmit","preventDefault","item","isDone","axios","post","then","res","console","log","data","get","id","this","map","index","_id","key","className","onClick","updateItem","role","aria-label","deleteItem","renderTableData","onSubmit","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b247b21.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class List extends React.Component {\r\n    // Init empy state to receive data\r\n    state = {\r\n        items: [],\r\n        name: '',\r\n        number: 0,\r\n    }\r\n\r\n    // Get data\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/items/')\r\n        .then(res => {\r\n            const items = res.data;\r\n            this.setState({ items })\r\n        });\r\n    }\r\n\r\n    // Add Item Form Methods\r\n    handleNameChange = event => {\r\n        this.setState({name: event.target.value});\r\n    }\r\n    handleAmountChange = event => {\r\n        this.setState({amount: event.target.value});\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const item = {\r\n            name: this.state.name,\r\n            amount: this.state.amount,\r\n            isDone: '‚ùå',\r\n        };\r\n\r\n        axios.post('http://localhost:5000/items/add', item)\r\n        .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            const items = res.data;\r\n            this.setState({ items });\r\n        })\r\n    }\r\n\r\n    // Delete Item\r\n    deleteItem(id){\r\n        axios.get('http://localhost:5000/items/delete/'+id)\r\n        .then(res => {\r\n            const items = res.data;\r\n            console.log('Deletion completed');\r\n            this.setState({ items });\r\n        });\r\n    }\r\n\r\n    // Update item\r\n    updateItem(id){\r\n        const done = {\r\n            isDone: 'üëç',\r\n        }\r\n        axios.post('http://localhost:5000/items/update/'+id, done)\r\n        .then(res => {\r\n            const items = res.data;\r\n            console.log('Shopping Done');\r\n            this.setState({ items });\r\n        })\r\n    }\r\n    // Render table\r\n    renderTableData(){\r\n        return this.state.items.map((item, index) => {\r\n            const { _id, name, amount, isDone } = item;\r\n            return (\r\n                <tr key={_id}>\r\n                    <td className=\"border px-4 py-2 text-center\">{name}</td>\r\n                    <td className=\"border px-4 py-2 text-center\">{amount}</td>\r\n                    <td className=\"border px-4 py-2 text-center\">{isDone}</td>\r\n                    <td className=\"border px-4 py-2 text-center\">\r\n                        <button \r\n                            className=\"mx-2 bg-green-300 hover:bg-green-500 py-2 px-4 rounded shadow\" \r\n                            onClick={() => this.updateItem(item._id)}\r\n                        >\r\n                            <span role=\"img\" aria-label=\"validate mark\">‚úîÔ∏è</span>\r\n                        </button>\r\n                        <button \r\n                            className=\"bg-red-300 hover:bg-red-500 py-2 px-4 rounded shadow\" \r\n                            onClick={() => this.deleteItem(item._id)}\r\n                        >\r\n                            <span role=\"img\" aria-label=\"bin\">üóëÔ∏è</span>\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"w-full mx-auto mt-8 font-mono\">\r\n                <h2 className=\"text-center underline\">List</h2>\r\n                <table className=\"table-auto w-5/6 mx-auto\" id=\"items\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td className=\"font-bold px-4 py-2 text-center\">Product</td>\r\n                                <td className=\"font-bold px-4 py-2 text-center\">Amount to purchase</td>\r\n                                <td className=\"font-bold px-4 py-2 text-center\">Purchased ?</td>\r\n                                <td className=\"font-bold px-4 py-2 text-center\">Actions</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderTableData()}\r\n                        </tbody>\r\n                </table>\r\n                <div className=\"w-5/6  mx-auto mt-12\">\r\n                <h3 className=\"w-3/6 mx-auto text-center underline mb-4\">Add Item</h3>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label className=\"w-3/7 text-center font-bold pr-4 block\">\r\n                            Product :\r\n                            <input className=\"appearance-none p-2 border-2 bg-gray-200 rounded mb-1 pr-4 ml-2\" type=\"text\" name=\"name\" onChange={this.handleNameChange}></input>\r\n                        </label>\r\n                        <label className=\"w-3/7 text-center font-bold pr-4 block\">\r\n                            Amount :\r\n                            <input className=\"appearance-none p-2 border-2 bg-gray-200 rounded mb-1 pr-4 ml-2\" type=\"number\" name=\"amount\" onChange={this.handleAmountChange}></input>\r\n                        </label>\r\n                        <button \r\n                            className=\"mt-4 w-1/6 mx-auto block py-2 px-4 rounded bg-blue-300 hover:bg-blue-400 shadow\" \r\n                            type=\"submit\">\r\n                                <span role=\"img\" aria-label=\"add cross\">‚ûï</span>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport List from './Components/List';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"w-full p-2 bg-blue-400 text-white\">\n        Shopping List App \n        <span className=\"ml-1\" role=\"img\" aria-label=\"shopping cart\">üõí</span>\n      </div>\n      <List></List>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}